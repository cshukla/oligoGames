% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modelNucCounts.R
\name{modelNucCounts}
\alias{modelNucCounts}
\title{Model nucleotide resolution counts from oligo counts}
\usage{
modelNucCounts(normalizedCounts, metaData, conditionLabels,
  modelMethod = c("median", "sum", "pgm"), oligoLen = NULL)
}
\arguments{
\item{normalizedCounts}{matrix of normalized counts in the format returned by
the function \code{normCounts}. Contains one row per oligo in the pool and 
one column for each sequenced replicate. The first column contains the name
of the oligo. Make sure that the name of the transcript is in the same 
format as described in 'allTranscriptsCounts_Raw.tsv'. Briefly, format is 
"GeneName_oligoNum_Barcode". It is critical that oligoNum is second to last
and separated by "_" otherwise parsing won't work properly. You can have 
any string downstream of oligoNum separated by _. Generally, people use 
barcode but it is not necessary to use the barcode.}

\item{metaData}{A file with the meta data of the experiment. Should include 
details such as the name of genes tiled, window size, length of oligo. 
Please see oligoMeta.tab in extdata for reference.}

\item{conditionLabels}{character vector of length two which contains the 
condition labels for the two conditions that are being compared.}

\item{modelMethod}{The modeling method used to get nucleotide counts from 
oligo counts. Must be either "median", "sum", or "pgm".  Defaults to 
"median".}

\item{oligoLen}{numeric value for the length of the oligos if all oligos have
the same value and this information is not included in the metadata file.}
}
\value{
modeledNucs matrix of modeled nucleotide counts
}
\description{
This is the main modeling function in this pakcage. We use the counts from 
all oligos overlapping the nucleotide to model the nucleotide's counts. We 
provide 3 options to do this: (1) Take the median of the counts of all oligos
tiling the nucleotide, (2) Take the sum of the counts of all oligos tiling 
the nucleotide or (3) Use a Bayesian network to model the "hidden layer" of 
nucleotides and then using conditional inference based on the observed oligo 
counts, obtain the nucleotide counts.
}
\examples{
normalizedCounts <- normCounts(rawCounts = system.file("extdata", 
"allTranscriptsCounts_Raw.tsv", package = "oligoGames"))
metaData <- system.file("extdata", "oligoMeta.tsv", package = "oligoGames")
oligoLen <- 110
modeledNucs <- modelNucCounts(normalizedCounts, metaData, 
conditionLabels = c("Nuclei", "Total"), modelMethod = "median", oligoLen = 110)
}
\keyword{modeling}

